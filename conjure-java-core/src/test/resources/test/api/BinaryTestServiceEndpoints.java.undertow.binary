package test.api;

import com.palantir.conjure.java.undertow.lib.BinaryResponseBody;
import com.palantir.conjure.java.undertow.lib.Endpoint;
import com.palantir.conjure.java.undertow.lib.UndertowRuntime;
import com.palantir.conjure.java.undertow.lib.UndertowService;
import io.undertow.server.HttpHandler;
import io.undertow.server.HttpServerExchange;
import io.undertow.util.HttpString;
import io.undertow.util.Methods;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import javax.annotation.Generated;

@Generated("com.palantir.conjure.java.services.UndertowServiceHandlerGenerator")
public final class BinaryTestServiceEndpoints implements UndertowService {
    private final BinaryTestService delegate;

    private BinaryTestServiceEndpoints(BinaryTestService delegate) {
        this.delegate = delegate;
    }

    public static UndertowService of(BinaryTestService delegate) {
        return new BinaryTestServiceEndpoints(delegate);
    }

    @Override
    public List<Endpoint> endpoints(UndertowRuntime runtime) {
        return Collections.unmodifiableList(
                Arrays.asList(new GetBinaryEndpoint(runtime, delegate)));
    }

    private static final class GetBinaryEndpoint implements HttpHandler, Endpoint {
        private final UndertowRuntime runtime;

        private final BinaryTestService delegate;

        GetBinaryEndpoint(UndertowRuntime runtime, BinaryTestService delegate) {
            this.runtime = runtime;
            this.delegate = delegate;
        }

        @Override
        public void handleRequest(HttpServerExchange exchange) throws IOException {
            BinaryResponseBody result = delegate.getBinary();
            runtime.bodySerDe().serialize(result, exchange);
        }

        @Override
        public HttpString method() {
            return Methods.GET;
        }

        @Override
        public String template() {
            return "/";
        }

        @Override
        public String serviceName() {
            return "BinaryTestService";
        }

        @Override
        public String name() {
            return "getBinary";
        }

        @Override
        public HttpHandler handler() {
            return this;
        }
    }
}
